import pandas as pd
import time
from sqlalchemy import create_engine
from clickhouse_driver import Client
import argparse
import os
import datetime

kis17client = Client(host='172.16.0.17', port='9006', user='aographck', password='e1SeTS6U')
usedClient = kis17client


def _argparse():
    parser = argparse.ArgumentParser(description='auto create class from ck table')

    parser.add_argument('-t', '--cktable', action='store', dest='cktable',
                        required=True, help='cktable for parse')
    parser.add_argument('-c', '--clzname', action='store',
                        dest='clzname', required=True, help='class name')

    parser.add_argument('-o', '--overwrite', action='count',
                        dest='overwrite', default=0, help='overwrite class name')

    return parser.parse_args()


def get_cktable_info(ck_client, table_name):
    sql = f"show create table {table_name}"
    ret = ck_client.execute(sql)
    info = ret[0][0]
    return info


def get_dst_path():
    dirPath = os.path.split(os.path.realpath(__file__))[0]
    str = os.sep + 'libs'
    if dirPath.endswith(str):
        dirPath = os.path.dirname(dirPath)
    str = os.sep + 'tools'
    if dirPath.endswith(str):
        dirPath = os.path.dirname(dirPath)
    str = os.sep + 'utils'
    if dirPath.endswith(str):
        dirPath = os.path.dirname(dirPath)
    return dirPath


def main():
    parser = _argparse()  # main这里引入命令行参数函数
    dst_path = os.path.join(get_dst_path(), 'bean')
    print(dst_path)
    if not os.path.exists(dst_path):
        os.mkdir(dst_path)
    dst_file = os.path.join(dst_path, parser.clzname + ".java")
    if os.path.exists(dst_file):
        if parser.overwrite > 0:
            os.remove(dst_file)
            print(f"overwrite target file {dst_file} ")
        else:
            print(f"target file {dst_file} is existed ")
            exit(0)

    header = f"""package com.aograph.characteristics.bean;

import lombok.Getter;
import lombok.Setter;

import java.io.*;
import java.util.List;
import java.util.ArrayList;
/**
 * @Package: com.aograph.characteristics.bean
 * @Autogenerated By {os.path.split(os.path.realpath(__file__))[1]} 
 * @CreateTime:  {datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}
 */
@Setter
@Getter
public class {parser.clzname} {'{'}
"""
    tail = "}"
    with open(dst_file, 'w') as fw:
        fw.write(header)
        info = get_cktable_info(usedClient, parser.cktable)
        lines = info.split('\n')
        for line in lines:
            if line[0] == ' ':
                parts = line.split()
                #         print(parts)
                #         print(line)
                param_name = parts[0][1:-1]
                #         print(param_name)
                param_type = parts[1]
                param_comment = None
                if len(parts) > 3:
                    param_comment = parts[3][1:-2]
                param_value = None
                if param_type.startswith('Nullable'):
                    param_type = param_type[9:-1]
                if param_type.startswith('Int'):
                    param_type = 'int'
                elif param_type.startswith('UInt'):
                    param_type = 'int'
                elif param_type.startswith('Float'):
                    param_type = 'float'
                elif param_type.startswith('DateTime'):
                    param_type = "java.sql.Timestamp"
                elif param_type.startswith('Date'):
                    param_type = "java.sql.Date"
                elif param_type.startswith('String'):
                    param_type = "String"
                elif param_type in ['Array(Int64)', 'Array(Int32)']:
                    param_type = "List<Integer>"
                    param_value = "new ArrayList<>()"
                elif param_type in ['Array(Float64)', 'Array(Float32)']:
                    param_type = "List<Float>"
                    param_value = "new ArrayList<>()"
                elif param_type in ['Array(String)']:
                    param_type = "List<String>"
                    param_value = "new ArrayList<>()"
                elif param_type in ['Array(Array(Int64))', 'Array(Array(Int32))']:
                    param_type = "List<List<Integer>> "
                    param_value = "new ArrayList<>()"
                elif param_type in ['Array(Array(Float64))', 'Array(Array(Float32))']:
                    param_type = "List<List<Float>> "
                    param_value = "new ArrayList<>()"
                elif param_type in ['Array(Array(String))']:
                    param_type = "List<List<String>> "
                    param_value = "new ArrayList<>()"
                else:
                    param_type = None
                new_line = line
                if param_type != None:
                    if param_value is None:
                        if param_comment is None:
                            new_line = f"    private {param_type} {param_name};"
                        else:
                            new_line = f"    private {param_type} {param_name};    // {param_comment}"
                    else:
                        if param_comment is None:
                            new_line = f"    private {param_type} {param_name} = {param_value};"
                        else:
                            new_line = f"    private {param_type} {param_name} = {param_value};    // {param_comment}"
                else:
                    new_line = '// TODO:' + line
                fw.write(new_line)
                fw.write("\n")
        fw.write(tail)

    # print(parser.cktable)
    # print(type(parser.cktable))
    # print(parser.clzname)
    # print(parser.overwrite)


if __name__ == '__main__':
    main()
